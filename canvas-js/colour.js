//  Module global variables

var  L_NUM = 11;			// Number of luminance slices
var  PATH_LEN = 100;			// Number of positions along path
var  STEP_P_HUE = 4;			// Steps per hue in hue/luminance path

var  grey_path = [			// Greyscale positions defining path
  [ 0, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 0 ],
  [ 1, 1, 1 ],
  [ 1, 1, 1 ],
  [ 1, 1, 1 ],
  [ 1, 1, 1 ],
  [ 2, 2, 2 ],
  [ 2, 2, 2 ],
  [ 2, 2, 2 ],
  [ 3, 3, 3 ],
  [ 3, 3, 3 ],
  [ 4, 4, 4 ],
  [ 4, 4, 4 ],
  [ 5, 5, 5 ],
  [ 6, 6, 6 ],
  [ 6, 6, 6 ],
  [ 7, 7, 7 ],
  [ 7, 7, 7 ],
  [ 8, 8, 8 ],
  [ 9, 9, 9 ],
  [ 10, 10, 10 ],
  [ 11, 11, 11 ],
  [ 12, 12, 12 ],
  [ 13, 13, 13 ],
  [ 14, 14, 14 ],
  [ 15, 15, 15 ],
  [ 15, 15, 15 ],
  [ 16, 16, 16 ],
  [ 18, 18, 18 ],
  [ 19, 19, 19 ],
  [ 21, 21, 21 ],
  [ 22, 22, 22 ],
  [ 24, 24, 24 ],
  [ 25, 25, 25 ],
  [ 27, 27, 27 ],
  [ 29, 29, 29 ],
  [ 30, 30, 30 ],
  [ 32, 32, 32 ],
  [ 33, 33, 33 ],
  [ 36, 36, 36 ],
  [ 38, 38, 38 ],
  [ 40, 40, 40 ],
  [ 42, 42, 42 ],
  [ 44, 44, 44 ],
  [ 46, 46, 46 ],
  [ 48, 48, 48 ],
  [ 50, 50, 50 ],
  [ 52, 52, 52 ],
  [ 55, 55, 55 ],
  [ 58, 58, 58 ],
  [ 61, 61, 61 ],
  [ 64, 64, 64 ],
  [ 66, 66, 66 ],
  [ 69, 69, 69 ],
  [ 72, 72, 72 ],
  [ 75, 75, 75 ],
  [ 78, 78, 78 ],
  [ 81, 81, 81 ],
  [ 85, 85, 85 ],
  [ 88, 88, 88 ],
  [ 92, 92, 92 ],
  [ 95, 95, 95 ],
  [ 99, 99, 99 ],
  [ 102, 102, 102 ],
  [ 106, 106, 106 ],
  [ 109, 109, 109 ],
  [ 113, 113, 113 ],
  [ 117, 117, 117 ],
  [ 120, 120, 120 ],
  [ 124, 124, 124 ],
  [ 128, 128, 128 ],
  [ 132, 132, 132 ],
  [ 135, 135, 135 ],
  [ 139, 139, 139 ],
  [ 143, 143, 143 ],
  [ 147, 147, 147 ],
  [ 150, 150, 150 ],
  [ 154, 154, 154 ],
  [ 159, 159, 159 ],
  [ 164, 164, 164 ],
  [ 168, 168, 168 ],
  [ 173, 173, 173 ],
  [ 178, 178, 178 ],
  [ 183, 183, 183 ],
  [ 188, 188, 188 ],
  [ 192, 192, 192 ],
  [ 197, 197, 197 ],
  [ 202, 202, 202 ],
  [ 207, 207, 207 ],
  [ 213, 213, 213 ],
  [ 218, 218, 218 ],
  [ 223, 223, 223 ],
  [ 228, 228, 228 ],
  [ 234, 234, 234 ],
  [ 239, 239, 239 ],
  [ 244, 244, 244 ],
  [ 249, 249, 249 ],
  [ 255, 255, 255 ]
];

var  rgb_path = [			// Colour positions defining path
  [ 5, 1, 5 ],
  [ 5, 1, 5 ],
  [ 6, 1, 5 ],
  [ 7, 1, 5 ],
  [ 9, 1, 6 ],
  [ 10, 2, 6 ],
  [ 11, 2, 6 ],
  [ 12, 2, 6 ],
  [ 13, 2, 7 ],
  [ 14, 3, 7 ],
  [ 15, 3, 7 ],
  [ 16, 3, 6 ],
  [ 17, 3, 6 ],
  [ 18, 4, 6 ],
  [ 20, 4, 6 ],
  [ 21, 5, 6 ],
  [ 22, 5, 6 ],
  [ 24, 6, 6 ],
  [ 25, 6, 6 ],
  [ 26, 7, 5 ],
  [ 27, 8, 5 ],
  [ 28, 9, 5 ],
  [ 29, 10, 5 ],
  [ 29, 11, 5 ],
  [ 30, 12, 5 ],
  [ 30, 13, 5 ],
  [ 32, 13, 4 ],
  [ 33, 14, 4 ],
  [ 35, 15, 3 ],
  [ 35, 17, 3 ],
  [ 36, 18, 2 ],
  [ 37, 20, 2 ],
  [ 37, 21, 2 ],
  [ 37, 23, 1 ],
  [ 37, 25, 1 ],
  [ 37, 27, 1 ],
  [ 37, 29, 1 ],
  [ 37, 31, 1 ],
  [ 37, 33, 1 ],
  [ 37, 35, 1 ],
  [ 36, 38, 2 ],
  [ 35, 40, 3 ],
  [ 35, 43, 4 ],
  [ 34, 45, 6 ],
  [ 32, 48, 8 ],
  [ 30, 50, 11 ],
  [ 28, 53, 14 ],
  [ 27, 55, 16 ],
  [ 26, 58, 20 ],
  [ 25, 60, 24 ],
  [ 23, 63, 28 ],
  [ 21, 67, 33 ],
  [ 19, 70, 37 ],
  [ 17, 73, 41 ],
  [ 16, 76, 45 ],
  [ 15, 79, 49 ],
  [ 14, 82, 53 ],
  [ 13, 85, 58 ],
  [ 12, 88, 63 ],
  [ 10, 91, 68 ],
  [ 9, 94, 74 ],
  [ 8, 97, 80 ],
  [ 6, 100, 88 ],
  [ 6, 103, 96 ],
  [ 6, 106, 104 ],
  [ 7, 109, 112 ],
  [ 7, 111, 120 ],
  [ 8, 114, 130 ],
  [ 9, 116, 140 ],
  [ 10, 118, 150 ],
  [ 12, 121, 160 ],
  [ 14, 123, 170 ],
  [ 17, 124, 180 ],
  [ 20, 126, 191 ],
  [ 23, 127, 200 ],
  [ 31, 128, 206 ],
  [ 40, 130, 211 ],
  [ 49, 130, 214 ],
  [ 59, 131, 217 ],
  [ 70, 132, 219 ],
  [ 80, 133, 221 ],
  [ 91, 134, 222 ],
  [ 101, 136, 222 ],
  [ 110, 137, 222 ],
  [ 120, 139, 222 ],
  [ 130, 140, 221 ],
  [ 139, 142, 220 ],
  [ 148, 144, 219 ],
  [ 156, 147, 220 ],
  [ 164, 150, 221 ],
  [ 171, 153, 222 ],
  [ 178, 157, 224 ],
  [ 185, 160, 225 ],
  [ 190, 164, 226 ],
  [ 196, 168, 227 ],
  [ 203, 171, 226 ],
  [ 209, 175, 226 ],
  [ 214, 179, 227 ],
  [ 219, 183, 228 ],
  [ 223, 188, 230 ]
];


//  Combined hue-luminance path (L_NUM slices, STEP_P_HUE values per
//  10 Munsell hues in each slice)

var colour_path = [
[
// Black
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ],
  [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ], [ 0,0,0 ]
],
[  //  Lum: 1, Saturation: 2
  [ 5,1,5 ], [ 5,1,4 ], [ 6,1,4 ], [ 6,1,4 ],  //  RP
  [ 6,1,3 ], [ 6,1,3 ], [ 6,1,2 ], [ 6,1,2 ],  //  R
  [ 6,1,1 ], [ 6,2,1 ], [ 6,2,1 ], [ 5,2,0 ],  //  YR
  [ 5,2,0 ], [ 4,2,0 ], [ 4,3,0 ], [ 3,3,0 ],  //  Y
  [ 3,3,1 ], [ 2,3,1 ], [ 2,3,2 ], [ 2,3,2 ],  //  GY
  [ 1,3,2 ], [ 1,3,2 ], [ 1,3,3 ], [ 1,3,3 ],  //  G
  [ 1,3,3 ], [ 1,3,4 ], [ 1,3,4 ], [ 1,3,4 ],  //  BG
  [ 1,3,5 ], [ 1,3,5 ], [ 1,3,6 ], [ 1,3,6 ],  //  B
  [ 1,3,6 ], [ 2,2,6 ], [ 2,2,6 ], [ 3,2,6 ],  //  PB
  [ 4,2,6 ], [ 4,2,6 ], [ 4,2,6 ], [ 5,1,5 ]   //  P
],
[  //  Lum: 2, Saturation: 4
  [ 15,4,13 ], [ 16,4,11 ], [ 17,4,10 ], [ 17,4,9 ],  //  RP
  [ 18,4,8 ], [ 18,4,6 ], [ 18,4,5 ], [ 18,4,4 ],  //  R
  [ 18,4,3 ], [ 17,5,2 ], [ 16,5,1 ], [ 15,6,1 ],  //  YR
  [ 13,6,0 ], [ 12,7,0 ], [ 10,7,0 ], [ 9,8,0 ],  //  Y
  [ 7,8,0 ], [ 6,9,1 ], [ 4,9,2 ], [ 3,9,4 ],  //  GY
  [ 2,10,5 ], [ 2,10,6 ], [ 2,10,7 ], [ 1,10,8 ],  //  G
  [ 1,10,9 ], [ 0,10,11 ], [ 0,10,12 ], [ 0,9,14 ],  //  BG
  [ 0,9,15 ], [ 0,9,17 ], [ 1,9,18 ], [ 1,8,19 ],  //  B
  [ 3,8,20 ], [ 4,7,20 ], [ 6,6,20 ], [ 8,6,19 ],  //  PB
  [ 10,5,18 ], [ 11,5,17 ], [ 13,5,16 ], [ 14,4,14 ]   //  P
],
[  //  Lum: 3, Saturation: 4
  [ 30,10,24 ], [ 32,10,21 ], [ 33,10,19 ], [ 34,10,16 ],  //  RP
  [ 35,10,14 ], [ 35,10,12 ], [ 35,10,10 ], [ 35,10,9 ],  //  R
  [ 34,11,7 ], [ 32,12,6 ], [ 30,13,5 ], [ 28,13,4 ],  //  YR
  [ 26,14,3 ], [ 23,15,3 ], [ 21,16,3 ], [ 19,17,3 ],  //  Y
  [ 16,18,3 ], [ 14,19,4 ], [ 11,19,6 ], [ 9,20,9 ],  //  GY
  [ 7,20,11 ], [ 6,20,13 ], [ 5,20,14 ], [ 4,21,16 ],  //  G
  [ 4,20,19 ], [ 3,20,21 ], [ 3,20,24 ], [ 2,20,27 ],  //  BG
  [ 3,20,30 ], [ 3,19,32 ], [ 4,18,34 ], [ 6,18,35 ],  //  B
  [ 8,17,36 ], [ 10,16,37 ], [ 14,14,37 ], [ 17,13,36 ],  //  PB
  [ 20,12,35 ], [ 23,12,33 ], [ 25,11,30 ], [ 28,11,28 ]   //  P
],
[  //  Lum: 4, Saturation: 6
  [ 58,18,46 ], [ 62,17,39 ], [ 65,17,33 ], [ 67,17,29 ],  //  RP
  [ 68,17,25 ], [ 69,17,20 ], [ 70,17,17 ], [ 69,18,13 ],  //  R
  [ 67,19,10 ], [ 63,21,7 ], [ 60,22,5 ], [ 55,24,3 ],  //  YR
  [ 50,26,2 ], [ 45,28,1 ], [ 40,30,1 ], [ 36,32,1 ],  //  Y
  [ 30,34,1 ], [ 25,35,3 ], [ 18,37,7 ], [ 13,39,10 ],  //  GY
  [ 8,40,17 ], [ 6,40,22 ], [ 4,40,25 ], [ 3,40,29 ],  //  G
  [ 2,40,34 ], [ 0,40,40 ], [ 0,39,46 ], [ 0,38,52 ],  //  BG
  [ 0,38,58 ], [ 2,36,63 ], [ 5,35,67 ], [ 8,33,69 ],  //  B
  [ 13,31,71 ], [ 17,30,72 ], [ 25,27,72 ], [ 32,25,70 ],  //  PB
  [ 37,23,66 ], [ 42,22,62 ], [ 48,20,57 ], [ 53,19,52 ]   //  P
],
[  //  Lum: 5, Saturation: 6
  [ 86,34,70 ], [ 92,33,61 ], [ 96,33,54 ], [ 99,32,48 ],  //  RP
  [ 101,32,43 ], [ 102,33,37 ], [ 103,33,32 ], [ 102,34,26 ],  //  R
  [ 100,35,21 ], [ 96,37,17 ], [ 92,39,13 ], [ 86,42,10 ],  //  YR
  [ 79,45,7 ], [ 72,47,6 ], [ 65,50,5 ], [ 59,52,5 ],  //  Y
  [ 51,55,7 ], [ 44,57,10 ], [ 34,60,16 ], [ 28,61,22 ],  //  GY
  [ 21,63,31 ], [ 17,63,38 ], [ 15,64,43 ], [ 13,63,49 ],  //  G
  [ 12,63,54 ], [ 10,63,63 ], [ 9,62,70 ], [ 8,62,79 ],  //  BG
  [ 9,60,86 ], [ 12,59,93 ], [ 16,56,98 ], [ 20,54,101 ],  //  B
  [ 27,52,104 ], [ 33,49,105 ], [ 43,46,105 ], [ 52,43,103 ],  //  PB
  [ 59,41,98 ], [ 66,39,92 ], [ 74,37,85 ], [ 80,35,78 ]   //  P
],
[  //  Lum: 6, Saturation: 8
  [ 138,50,108 ], [ 148,48,92 ], [ 153,48,81 ], [ 157,47,71 ],  //  RP
  [ 161,47,62 ], [ 163,47,53 ], [ 165,48,44 ], [ 164,49,34 ],  //  R
  [ 160,52,27 ], [ 153,55,19 ], [ 144,59,14 ], [ 134,63,9 ],  //  YR
  [ 123,68,6 ], [ 111,72,3 ], [ 100,77,2 ], [ 91,80,2 ],  //  Y
  [ 78,85,3 ], [ 65,89,7 ], [ 49,94,15 ], [ 37,97,26 ],  //  GY
  [ 25,99,42 ], [ 18,100,54 ], [ 14,100,63 ], [ 11,100,72 ],  //  G
  [ 8,100,82 ], [ 5,100,96 ], [ 3,99,108 ], [ 2,97,123 ],  //  BG
  [ 3,95,138 ], [ 7,92,152 ], [ 14,88,160 ], [ 23,84,166 ],  //  B
  [ 34,80,170 ], [ 45,75,172 ], [ 62,70,169 ], [ 77,65,164 ],  //  PB
  [ 90,61,158 ], [ 102,58,148 ], [ 117,54,134 ], [ 128,52,122 ]   //  P
],
[  //  Lum: 7, Saturation: 8
  [ 189,76,149 ], [ 201,74,129 ], [ 207,73,116 ], [ 213,73,102 ],  //  RP
  [ 217,72,91 ], [ 220,73,80 ], [ 223,73,67 ], [ 221,75,55 ],  //  R
  [ 215,79,45 ], [ 205,83,35 ], [ 195,88,28 ], [ 182,94,21 ],  //  YR
  [ 169,99,16 ], [ 153,105,13 ], [ 141,110,11 ], [ 129,114,11 ],  //  Y
  [ 114,120,14 ], [ 98,125,19 ], [ 77,131,30 ], [ 61,135,44 ],  //  GY
  [ 45,139,64 ], [ 36,140,81 ], [ 31,140,92 ], [ 27,140,103 ],  //  G
  [ 23,140,115 ], [ 19,139,131 ], [ 17,138,147 ], [ 16,136,166 ],  //  BG
  [ 18,133,183 ], [ 23,129,200 ], [ 30,125,212 ], [ 41,120,220 ],  //  B
  [ 56,114,226 ], [ 70,109,229 ], [ 91,101,229 ], [ 110,95,223 ],  //  PB
  [ 126,90,212 ], [ 140,87,200 ], [ 161,82,181 ], [ 175,78,166 ]   //  P
],
[  //  Lum: 8, Saturation: 4
  [ 196,130,179 ], [ 202,129,169 ], [ 207,128,162 ], [ 211,128,154 ],  //  RP
  [ 214,127,147 ], [ 217,127,140 ], [ 220,127,131 ], [ 222,128,122 ],  //  R
  [ 220,129,112 ], [ 216,132,104 ], [ 210,135,97 ], [ 202,139,89 ],  //  YR
  [ 193,143,84 ], [ 182,147,80 ], [ 176,150,78 ], [ 169,152,78 ],  //  Y
  [ 158,156,81 ], [ 150,158,85 ], [ 132,164,96 ], [ 120,166,108 ],  //  GY
  [ 109,169,123 ], [ 102,169,135 ], [ 99,170,143 ], [ 96,170,152 ],  //  G
  [ 93,170,159 ], [ 92,169,169 ], [ 92,168,180 ], [ 91,167,190 ],  //  BG
  [ 93,165,199 ], [ 98,162,208 ], [ 104,159,213 ], [ 113,155,218 ],  //  B
  [ 123,151,220 ], [ 132,148,221 ], [ 144,144,220 ], [ 153,141,217 ],  //  PB
  [ 163,138,214 ], [ 170,136,209 ], [ 183,132,197 ], [ 190,131,188 ]   //  P
],
[  //  Lum: 9, Saturation: 2
  [ 226,187,226 ], [ 229,187,222 ], [ 231,187,219 ], [ 233,186,215 ],  //  RP
  [ 232,187,213 ], [ 236,186,208 ], [ 238,186,203 ], [ 240,186,199 ],  //  R
  [ 242,186,191 ], [ 243,187,181 ], [ 242,188,173 ], [ 238,191,165 ],  //  YR
  [ 233,193,160 ], [ 227,196,157 ], [ 222,198,155 ], [ 218,199,154 ],  //  Y
  [ 212,201,156 ], [ 205,203,158 ], [ 192,207,168 ], [ 182,209,178 ],  //  GY
  [ 174,211,189 ], [ 170,211,197 ], [ 167,211,204 ], [ 166,211,210 ],  //  G
  [ 165,211,215 ], [ 165,210,221 ], [ 165,209,229 ], [ 167,208,234 ],  //  BG
  [ 171,206,239 ], [ 176,204,242 ], [ 182,201,244 ], [ 186,200,245 ],  //  B
  [ 193,197,245 ], [ 197,196,245 ], [ 203,193,244 ], [ 208,192,243 ],  //  PB
  [ 211,191,242 ], [ 214,190,240 ], [ 220,189,234 ], [ 223,188,230 ]   //  P
],
[
// White
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ],
  [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ], [ 255,255,255 ]
]
];


function get_colour( t )

  //  This routine converts a parametric t-value into a position along
  //  the colour path, and from there into an RGB colour value
  //
  //  t:  Parametric position along path
{
  var  i;				// Path position left of t
  var  frac;				// Fractional amount past position i
  var  r, g, b;				// RGB colour


  if ( t < 0 ) {			// Bracket t to range 0-1
    t = 0;
  } else if ( t > 1 ) {
    t = 1;
  }

  i = Math.floor( ( PATH_LEN - 1 ) * t );
  frac = ( ( PATH_LEN - 1 ) * t ) - i;

  r = rgb_path[ i ][ 0 ];		// Define anchor colour
  g = rgb_path[ i ][ 1 ];
  b = rgb_path[ i ][ 2 ];

  if ( i < PATH_LEN - 1 ) {		// Add fractional amount
    r += ( rgb_path[ i + 1 ][ 0 ] - rgb_path[ i ][ 0 ] ) * frac;
    g += ( rgb_path[ i + 1 ][ 1 ] - rgb_path[ i ][ 1 ] ) * frac;
    b += ( rgb_path[ i + 1 ][ 2 ] - rgb_path[ i ][ 2 ] ) * frac;
  }

  r = Math.round( r );
  g = Math.round( g );
  b = Math.round( b );
  return { r: r, g: g, b: b };
}					// End function get_colour


function get_colour_w_L( L, t )

  //  This routine converts a parametric L and t-value into a position
  //  along a combined luminance-hue path, and from there into an RGB
  //  colour value
  //
  //  L:  Parametric position along luminance pole
  //  t:  Parametric position along gamut boundary path
{
  var  L_i;				// Path position left of L
  var  L_frac;				// Fractional amount past position L_i
  var  r, g, b;				// RGB colour
  var  t_i;				// Path position left of t
  var  t_frac;				// Fractional amount past position t_i
  var  x, y, z;				// RGB anchor for L interpolation


  if ( L < 0 ) {			// Bracket L to range 0-1
    L = 0;
  } else if ( L > 1 ) {
    L = 1;
  }

  if ( t < 0 ) {			// Bracket t to range 0-1
    t = 0;
  } else if ( t > 1 ) {
    t = 1;
  }

  L_i = Math.floor( ( L_NUM - 1 ) * L );
  L_frac = ( ( L_NUM - 1 ) * L ) - L_i;
  t_i = Math.floor( ( ( STEP_P_HUE * 10 ) - 1 ) * t );
  t_frac = ( ( ( STEP_P_HUE * 10 ) - 1 ) * t ) - t_i;

  r = colour_path[ L_i ][ t_i ][ 0 ];	// Define anchor colour
  g = colour_path[ L_i ][ t_i ][ 1 ];
  b = colour_path[ L_i ][ t_i ][ 2 ];

  if ( Math.abs( t_frac ) > 0.01 ) {	// Add fractional amount
    r += ( colour_path[ L_i ][ t_i + 1 ][ 0 ] - r ) * t_frac;
    g += ( colour_path[ L_i ][ t_i + 1 ][ 1 ] - g ) * t_frac;
    b += ( colour_path[ L_i ][ t_i + 1 ][ 2 ] - b ) * t_frac;
  }

  if ( Math.abs( L_frac ) > 0.01 ) {	// Interpolate between luminance slices
    x = colour_path[ L_i + 1 ][ t_i ][ 0 ];
    y = colour_path[ L_i + 1 ][ t_i ][ 1 ];
    z = colour_path[ L_i + 1 ][ t_i ][ 2 ];

    if ( Math.abs( t_frac ) > 0.01 ) {	// Add fractional amount
      x += ( colour_path[ L_i + 1 ][ t_i + 1 ][ 0 ] - x ) * t_frac;
      y += ( colour_path[ L_i + 1 ][ t_i + 1 ][ 1 ] - y ) * t_frac;
      z += ( colour_path[ L_i + 1 ][ t_i + 1 ][ 2 ] - z ) * t_frac;
    }

    r += ( x - r ) * L_frac;		// Add fractional amount in L-direction
    g += ( y - g ) * L_frac;
    b += ( z - b ) * L_frac;
  }

  r = Math.round( r );
  g = Math.round( g );
  b = Math.round( b );
  return { r: r, g: g, b: b };
}					// End routine get_colour_w_L


function get_grey( t )

  //  This routine converts a parametric t-value into a position along
  //  a perceptually balanced grey path, and from there into an RGB
  //  colour value
  //
  //  t:  Parametric position along path
{
  var  i;				// Path position left of t
  var  frac;				// Fractional amount past position i
  var  r, g, b;				// RGB colour


  if ( t < 0 ) {			// Bracket t to range 0-1
    t = 0;
  } else if ( t > 1 ) {
    t = 1;
  }

  i = Math.floor( ( PATH_LEN - 1 ) * t );
  frac = ( ( PATH_LEN - 1 ) * t ) - i;

  r = grey_path[ i ][ 0 ];		// Define anchor colour
  g = grey_path[ i ][ 1 ];
  b = grey_path[ i ][ 2 ];

  if ( i < PATH_LEN - 1 ) {		// Add fractional amount
    r += ( grey_path[ i + 1 ][ 0 ] - grey_path[ i ][ 0 ] ) * frac;
    g += ( grey_path[ i + 1 ][ 1 ] - grey_path[ i ][ 1 ] ) * frac;
    b += ( grey_path[ i + 1 ][ 2 ] - grey_path[ i ][ 2 ] ) * frac;
  }

  r = Math.round( r );
  g = Math.round( g );
  b = Math.round( b );
  return { r: r, g: g, b: b };
}					// End routine get_grey
